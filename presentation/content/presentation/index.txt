---
title:      Webby S5
created_at: 2008-05-18 22:10:21.995012 -06:00
author:     You
company:    Company
copyright:  Creative Commons
filter:
  - erb
  - textile
  - slides
layout: presentation
---
h1. Clojure and Swing

Using the Swing toolkit to write GUI desktop applications in Clojure

h1. Why Swing?

* Default java gui toolkit
* No native code needed
* Tons of documentation, examples and third-party widgets

h1. Hello World

It doesn't take much to get a Swing GUI up and running:

<% uv :lang => "scheme", :theme => 'twilight' do -%>
(import 'javax.swing.JOptionPane)

(. JOptionPane (showMessageDialog nil "Hello World"))
<% end -%>


h1. Translating from Java

An example from a Java Swing tutorial:

<%= render :partial => 'helloworld.java', :guard => true %>


h1. Translating from Java

And the same example in Clojure

<%= render :partial => 'helloworld.clj', :guard => true %>

h1. Listeners

<% uv :lang => "java", :theme => "twilight" do -%>
public class Beeper ... implements ActionListener {
    // argument to addActionListener is an object
    // that implements ActionListener
    button.addActionListener(this);

    public void actionPerformed(ActionEvent e) {
      makeBeepSound();
    }
}
<% end %>

and in clojure
<% uv :lang => "scheme", :theme => "twilight" do -%>
    (.addActionListener button
      (proxy [ActionListener] []
         (actionPerformed [e] (make-beep-sound))
<% end %>

h1. Listeners - Now with swing-utils
<% uv :lang => "scheme", :theme => "twilight" do -%>
  (ns examples.event
    (:use (clojure.contrib
        [swing-utils :only (add-action-listener)])))
  
  ;; Usage: (add-action-listener component f & args)
  (add-action-listener button make-beep-sound))
<% end %>

h1. Simple BorderLayout example

<%= render :partial => 'border.clj', :guard => true %>

h1. Simple BorderLayout example

!screenshot-border.png!

h1. MigLayout

<%= render :partial => 'miglayout.clj', :guard => true %>

h1. MigLayout

!screenshot-mig.png!
